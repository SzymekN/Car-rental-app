version: '3'

# networks:
#   default: 
#     name: redisnet
#     external: true

services:
  # cassandra:
  #   image: cassandra
  #   container_name: cassandra
  #   restart: always
  #   # ports:
  #     # - 9042:9042
  #     # - 9160:9160
  #   volumes:
  #     - /cassandra/data:/var/lib/cassandra
  #     - /vagrant_data:/shared
  #   environment:
  #     - CASSANDRA_CLUSTER_NAME=userapi
  #   healthcheck:
  #     test: ["CMD", "cqlsh", "-e", "describe keyspaces" ]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=userapi
      - MYSQL_DATABASE=userapi
    # ports:
      # - '5432:5432'
    volumes: 
      - /postgres/data:/var/lib/postgresql/data
      - /vagrant_data:/shared
    healthcheck:
      test: ["CMD", "pg_isready", "-U" ,"userapi"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=userapi
      - POSTGRES_PASSWORD=userapi
    # ports:
      # - '5432:5432'
    volumes: 
      - /postgres/data:/var/lib/postgresql/data
      - /vagrant_data:/shared
    healthcheck:
      test: ["CMD", "pg_isready", "-U" ,"userapi"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-server:
    image: redis:6.2.7
    container_name: redis-server
    command: ["redis-server"]
    
  userapi-1:
    depends_on:
      # - cassandra
      - postgres
      - redis-server

    build: /vagrant_data
    container_name: userapi-1
    restart: always
    ports:
      - '8200:8200'
      - '8300:8300'
    environment:
      - API_PORT=8200
      - REDIS_PORT=6379
      # - GRPC_PORT=8300
      - PG_HOST=postgres
      - CASSANDRA_HOST=cassandra
      - REDIS_HOST=redis-server
      - REDIS-PASSWORD=userapi
      - KAFKA_HOST=kafka-1

  # userapi-2:
  #   depends_on:
  #     - cassandra
  #     - postgres
  #     - redis-server

  #   build: /vagrant_data
  #   container_name: userapi-2
  #   restart: always
  #   ports:
  #     - '8201:8201'
  #     - '8301:8301'
  #   environment:
  #     - API_PORT=8201
  #     - GRPC_PORT=8301
  #     - PG_HOST=postgres
  #     - CASSANDRA_HOST=cassandra
  #     - REDIS_HOST=redis-server
  #     - JWT_KEY=userapi-2

  zookeeper:
      image: docker.io/bitnami/zookeeper:3.8
      container_name: zookeper-1
      # ports:
        # - "2181:2181"
      volumes:
        - "/zookeeper:/bitnami/"
      environment:
        - ALLOW_ANONYMOUS_LOGIN=yes
  kafka-1:
      image: docker.io/bitnami/kafka:3.2
      container_name: kafka-1
      # ports:
      #   - "9092:9092"
      volumes:
        - "/kafka/broker-1:/bitnami/kafka/data"
      environment:
        - KAFKA_BROKER_ID=1
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
        # teraz ip to adres vm, jeśli producenci i konsumenci będą na dockerze to trzeba będzie zmienić pewnie na nazwy serwisów
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
        - ALLOW_PLAINTEXT_LISTENER=yes
        - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
        - KAFKA_DEFAULT_REPLICATION_FACTOR=3
        - KAFKA_NUM_PARTITIONS=3
      depends_on:
        - zookeeper
      restart: always
      # command: ["kafka-topics.sh --create --bootstrap-server kafka-1:9092 --replication-factor 1 --partitions 1 --topic messages"]

  kafka-2:
      image: docker.io/bitnami/kafka:3.2
      container_name: kafka-2
      volumes:
        - "/kafka/broker-2:/bitnami/kafka/data"
      environment:
        - KAFKA_BROKER_ID=2
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9093
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9093
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
        - ALLOW_PLAINTEXT_LISTENER=yes
        - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
        - KAFKA_DEFAULT_REPLICATION_FACTOR=3
        - KAFKA_NUM_PARTITIONS=3
      depends_on:
        - zookeeper
      restart: always
  kafka-3:
      image: docker.io/bitnami/kafka:3.2
      container_name: kafka-3
      volumes:
        - "/kafka/broker-3:/bitnami/kafka/data"
      environment:
        - KAFKA_BROKER_ID=3
        - KAFKA_CFG_LISTENERS=PLAINTEXT://:9094
        - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9094
        - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
        - ALLOW_PLAINTEXT_LISTENER=yes
        - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
        - KAFKA_DEFAULT_REPLICATION_FACTOR=3
        - KAFKA_NUM_PARTITIONS=3
      depends_on:
        - zookeeper
      restart: always
  consumer:
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    build: /consumer_data
    container_name: consumer
    restart: always

        # (cd /opt/bitnami/kafka/bin/windows/; ./kafka-topics.sh --create --bootstrap-server kafka-kafka-1:9092 --replication-factor 1 --partitions 1 --topic messages)
        # kafka-topics.sh --create --bootstrap-server kafka-1:9092 --replication-factor 1 --partitions 1 --topic messages
        
        # sudo docker run --name redis-server --network redisnet -d redis
        # sudo docker run -it --network redisnet redis bash
        # redis-cli -h redis-server